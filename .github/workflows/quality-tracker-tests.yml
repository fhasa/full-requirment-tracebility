name: Quality Tracker Test Execution

on:
  repository_dispatch:
    types: [quality-tracker-test-run]

jobs:
  run-tests:
    runs-on: ubuntu-latest
    env:
      REQUIREMENT_ID: ${{ github.event.client_payload.requirementId }}
      REQUIREMENT_NAME: ${{ github.event.client_payload.requirementName }}
      TEST_CASE_IDS: ${{ join(github.event.client_payload.testCases, ' or ') }}
      CALLBACK_URL: ${{ github.event.client_payload.callbackUrl }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-html
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Display test cases to run
        run: |
          echo "Executing tests for requirement: $REQUIREMENT_ID - $REQUIREMENT_NAME"
          echo "Test case IDs: $TEST_CASE_IDS"
      
      - name: Run tests
        id: run_tests
        run: |
          # Run pytest with -k to select tests containing the test case IDs
          python -m pytest -v -k "$TEST_CASE_IDS" --junit-xml=test-results.xml
        continue-on-error: true  # Continue workflow even if tests fail
      
      - name: Generate test results JSON
        run: |
          python -c '
          import json
          import xml.etree.ElementTree as ET
          import os
          import time
          
          # Parse JUnit XML result
          test_results = []
          try:
              tree = ET.parse("test-results.xml")
              root = tree.getroot()
              
              # Get test case IDs from environment variable
              test_ids = os.environ.get("TEST_CASE_IDS", "").replace(" or ", ",").split(",")
              
              # Extract test results
              for testcase in root.findall(".//testcase"):
                  name = testcase.get("name", "")
                  classname = testcase.get("classname", "")
                  
                  # Match test ID (simplified for example)
                  test_id = None
                  for tid in test_ids:
                      if tid in name or tid in classname:
                          test_id = tid
                          break
                  
                  if not test_id:
                      continue
                  
                  # Determine status
                  status = "Passed"
                  if testcase.find("failure") is not None or testcase.find("error") is not None:
                      status = "Failed"
                  elif testcase.find("skipped") is not None:
                      status = "Not Run"
                  
                  # Calculate duration in milliseconds
                  duration_ms = int(float(testcase.get("time", "0")) * 1000)
                  
                  test_results.append({
                      "id": test_id,
                      "name": name,
                      "status": status,
                      "duration": duration_ms
                  })
              
              # Add missing test cases as Not Run
              found_ids = [r["id"] for r in test_results]
              for tid in test_ids:
                  if tid and tid not in found_ids:
                      test_results.append({
                          "id": tid,
                          "name": f"Test {tid}",
                          "status": "Not Run",
                          "duration": 0
                      })
          except Exception as e:
              print(f"Error processing test results: {e}")
              # Create placeholder results for all test IDs
              for tid in os.environ.get("TEST_CASE_IDS", "").replace(" or ", ",").split(","):
                  if tid:
                      test_results.append({
                          "id": tid,
                          "name": f"Test {tid}",
                          "status": "Error",
                          "duration": 0
                      })
          
          # Save to file
          with open("results.json", "w") as f:
              json.dump({
                  "requirementId": os.environ.get("REQUIREMENT_ID"),
                  "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
                  "results": test_results
              }, f, indent=2)
          
          print(f"Generated test results for {len(test_results)} test cases")
          '
      
      - name: Send results back to Quality Tracker
        if: env.CALLBACK_URL != ''
        run: |
          echo "Sending test results back to Quality Tracker..."
          curl -X POST \
            -H "Content-Type: application/json" \
            -d @results.json \
            $CALLBACK_URL